/**
Copyright 2023-2025, Brendan Andrew Rood
*/

/**
This file is part of the Rapid-Tree-Note / RTN program.

RTN is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

RTN is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with RTN. It is available at ./License/COPYING. Otherwise, see <https://www.gnu.org/licenses/#AGPL>
*/

// MINIFIED VERSION OF THE FILE OF THE SAME NAME IN THE `src` FOLDER
// MINIFIED WITH https://www.toptal.com/developers/javascript-minifier
// MINIFIED AT Sun Oct 26 14:11:30 CDT 2025

export class Formatter{static escapeUnkown(a){var r=a;return r.replace(/[^A-Za-z0-9_-]/g,"_")}static escapeWhitespace(a){var r=a;return r.replaceAll("\n","\\n").replaceAll("	","\\t")}static trimTrailingWhitespace(a){var r=a;return r.replace(/[\s]+$/,"")}static shrinkTreeToFour(a){var r=a;return(r=(r=(r=r.replace(/├────── ​/gm,"├── ​")).replace(/└────── ​/gm,"└── ​")).replace(/│       ​/gm,"│   ​")).replace(/        ​/gm,"    ​")}static revertList(a){var r=a;return(r=(r=(r=r.replace(/(\s*)(•)(.*)/gm,"$1-$3")).replace(/\[✓ \]/gm,"[Y]")).replace(/\[✗ \]/gm,"[N]")).replace(/\[~ \]/gm,"[~]")}static escapeHTML(a){var r=a;return(r=(r=(r=(r=r.replace(/&(?!amp;|lt;|gt;|quot;|apos;)/g,"&amp;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;")).replace(/"/g,"&quot;")).replace(/'/g,"&apos;")}static treeToTab(a){var r=a;return(r=(r=r.replace(/(├─* ​|│ *​|└─* ​| *​)/gm,"	")).replace(/├────── |│       |└────── |        /gm,"	")).replace(/├── |│   |└── |    /gm,"	")}static resizeGlyphs(a,r){var e=a;let t="├"+"─".repeat(r-2)+" ​",s="└"+"─".repeat(r-2)+" ​",l="│"+" ".repeat(r-2)+" ​",p=" "+" ".repeat(r-2)+" ​";return(e=(e=(e=e.replace(/├────── ​/gm,t)).replace(/└────── ​/gm,s)).replace(/│       ​/gm,l)).replace(/        ​/gm,p)}static removeInternalTabs(a){var r=a;return r.replace(/(?:\t*[\S ]+)(\t+)/gm," ")}}export class ExecutiveFormatter{static PARSE(a){return a=Formatter.escapeHTML(a),a=this.formatLinks(a),a=this.formatDirNavLinks(a),a=this.formatArrows(a),a=this.formatItalic(a),a=this.formatBulletPoints(a),a=this.formatOrderedLists(a),a=this.formatChecklists(a),a=this.formatUnderline(a),a=this.formatSpoiler(a),a=this.formatBold(a),a=this.formatBoldAndItalic(a),a=this.formatStrikethrough(a),a=this.formatSuperscript(a),a=this.formatSubscript(a),a=this.formatCode(a),a=this.formatRegex(a),a=this.formatManualHighlighting(a),a=this.formatManualColor(a),a=this.colorTreeGlyphs(a)}static formatLinks(a){return a=a.replace(/(\[([^\]]+?)\]\((\S+)\))|(https?:\/\/\S+)/g,function(a,r,e,t,s){return t?`<a style="z-index: 4; pointer-events: all; position: relative;" href="${t}" target="_blank" rel="noopener noreferrer"><b>[${e}](${t})</b></a>`:`<a style="z-index: 4; pointer-events: all; position: relative;" href="${s}" target="_blank" rel="noopener noreferrer"><b>${s}</b></a>`})}static formatDirNavLinks(a){for(var r=a.split("\n"),e=0;e<r.length;e++)window.dirnavIndex=e,r[e]=r[e].replace(/(DNL|RTN|DL)([\.\~]{0,1})((?:\/\.\.|\/\[[^\]]+\])+)(\/?)/g,function(a,r,e,t,s){var l=window.main.dirnav(null,r+e+t+s,window.dirnavIndex,!0)?"var(--RTN-SETTING_css-dnlValidColor)":"var(--RTN-SETTING_css-dnlInvalidColor)";let p=`<a style="z-index: 4; pointer-events: all; position: relative; color: ${l};" href="#" onclick="window.main.dirnav(event, '${r+e+t+s}', ${window.dirnavIndex});"><b>${r+e+t+s}</b></a>`;return p});var t="";for(var s of r)t+=s+"\n";return a=t.substring(0,t.length-1)}static formatArrows(a){return a=a.replace(/((?:\&lt\;)?)(-+|=+)((?:\&gt\;)?)/g,function(a,r,e,t){var s=r+e+t;return s.startsWith("&lt;")||s.split("").reverse().join("").startsWith(";tg&")?`<b>${s}</b>`:s})}static formatItalic(a){return a.replace(/(?<!\*|\\)(\*{1})([^\n*]+?)(\1)(?!\*|\\)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><i>$2</i><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatBulletPoints(a){return a=(a=a.replace(/^((?:[└├│─ ]*​)*)(-)( )/gm,'$1<span style="color: var(--RTN-SETTING_css-listElementColor)">•</span>$3')).replace(/^((?:[└├│─ ]*​)*)(\*)( )(?!.*\*)/gm,'$1<span style="color: var(--RTN-SETTING_css-listElementColor)">•</span>$3')}static formatOrderedLists(a){return a.replace(/^((?:[└├│─ ]*​)*)([0-9]+\.)( )/gm,'$1<span style="color: var(--RTN-SETTING_css-listElementColor)"><b>$2</b></span>$3')}static formatChecklists(a){return a=(a=(a=a.replace(/\[[Yy\/]\]/gm,`<span style="color: var(--RTN-SETTING_css-checklistYesColor); text-shadow: -1px -1px 5px black, -1px 0px 5px black, -1px 1px 5px black, 0px -1px 5px black, 0px 1px 5px black, 1px -1px 5px black, 1px 0px 5px black, 1px 1px 5px black;">[<span style="position: relative;"><span style="width: 1em; display: inline-block; position: absolute;">✓</span></span> ]</span>`)).replace(/\[[NnXx]\]/gm,`<span style="color: var(--RTN-SETTING_css-checklistNoColor); text-shadow: -1px -1px 5px black, -1px 0px 5px black, -1px 1px 5px black, 0px -1px 5px black, 0px 1px 5px black, 1px -1px 5px black, 1px 0px 5px black, 1px 1px 5px black;">[<span style="max-width: 1em; overflow: hidden;"><span style="width: 1em; display: inline-block; position: absolute;">✗</span></span> ]</span>`)).replace(/\[[Mm\~\-]\]/gm,'<span style="color: var(--RTN-SETTING_css-checklistMaybeColor); text-shadow: -1px -1px 5px black, -1px 0px 5px black, -1px 1px 5px black, 0px -1px 5px black, 0px 1px 5px black, 1px -1px 5px black, 1px 0px 5px black, 1px 1px 5px black;">[<span style="max-width: 1em; overflow: hidden;"><span style="width: 1em; display: inline-block; position: absolute;">~</span></span> ]</span>')}static formatUnderline(a){return a.replace(/(?<!\_|\\)(\_{2})([^\n_]+?)(\1)(?!\_|\\)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><u>$2</u><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatSpoiler(a){return a.replace(/(?<!\||\\)(\|{2})([^\n\|]+?)(\1)(?!\||\\)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><a style="z-index: 4; pointer-events: all; position: relative;" href="#s" title="$2"><span style="font-size: 0vw;">$2</span></a><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatBold(a){return a.replace(/(?<!\*|\\)(\*{2})([^\n*]+?)(\1)(?!\*|\\)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><b>$2</b><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatBoldAndItalic(a){return a.replace(/(?<!\*|\\)(\*{3})([^\n*]+?)(\1)(?!\*|\\)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><i><b>$2</b></i><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatStrikethrough(a){return a.replace(/(?<!\~|\\)(\~{2})([^\n~]+?)(\1)(?!\~|\\)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><del>$2</del><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatSuperscript(a){return a.replace(/(?<!\\|\!)(\^)(.*?)(\^)(?<!\\|\!)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><span style="display: inline-block; top: -0.2vw; position: relative; line-height: 0.000001em; margin-block: 0;">$2</span><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatSubscript(a){return a.replace(/(?<!\\)(\!\^)(.*?)(\!\^)(?<!\\)/g,'<span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$1</b></span><span style="display: inline-block; top: 0.2vw; position: relative; line-height: 0.000001em; margin-block: 0;">$2</span><span style="color: var(--RTN-SETTING_css-glyphColor)"><b>$3</b></span>')}static formatCode(a){return a.replace(/(?<!\`)(\`{1})([^\n`]+?)(\1)(?!\`)/g,'<span style="color: var(--RTN-SETTING_css-codeTextColor); background-color: var(--RTN-SETTING_css-codeBackgroundColor);"><b>$1</b>$2<b>$3</b></span>')}static formatRegex(a){return a.replace(/(RE)(\/)((?:[^\r\n\t\f\v ]|\\ )+)(\/)([gmixsuUAJD]*)/g,'<span style="background-color: var(--RTN-SETTING_css-regexBackgroundColor)"><span style="color: var(--RTN-SETTING_css-regexFlagColor)"><b>$1$2</b></span><span style="color: var(--RTN-SETTING_css-regexPatternColor)">$3</span><span style="color: var(--RTN-SETTING_css-regexFlagColor)"><b>$4$5</b></span></span>')}static formatManualHighlighting(a){return a=a.replace(/(\[hc)([0-9abcdef])([0-9abcdef])([0-9abcdef])(\])(.*?)(\1)(\2)(\3)(\4)(\5)/g,function(a,r,e,t,s,l,p,o,n,c,i,b){let x=parseInt(`${e}0`,16),T=parseInt(`${t}0`,16),g=parseInt(`${s}0`,16);return Math.max(x,T,g)>127?`<b>${r}${e}${t}${s}${l}</b><span style="color: #101010; background-color: #${e}0${t}0${s}0;"><b>${p}</b></span><b>${o}${n}${c}${i}${b}</b>`:`<b>${r}${e}${t}${s}${l}</b><span style="background-color: #${e}0${t}0${s}0;"><b>${p}</b></span><b>${o}${n}${c}${i}${b}</b>`})}static formatManualColor(a){return a=a.replace(/(\[tc)([0-9abcdef])([0-9abcdef])([0-9abcdef])(\])(.*?)(\1)(\2)(\3)(\4)(\5)/g,function(a,r,e,t,s,l,p,o,n,c,i,b){return`<b>${r}${e}${t}${s}${l}</b><span style="color: #${e}0${t}0${s}0; text-shadow: -1px -1px 5px black, -1px 0px 5px black, -1px 1px 5px black, 0px -1px 5px black, 0px 1px 5px black, 1px -1px 5px black, 1px 0px 5px black, 1px 1px 5px black;"><b>${p}</b></span><b>${o}${n}${c}${i}${b}</b>`})}static colorTreeGlyphs(a){return a=a.replace(/[└├│─ ]*​/gm,function(a){return`<span style="color: var(--RTN-SETTING_css-glyphColor);">${a}</span>`})}}